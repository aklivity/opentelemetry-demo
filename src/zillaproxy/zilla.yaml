---
name: ${{ env.OTEL_SERVICE_NAME }}
bindings:
  north_tcp_server:
    type: tcp
    kind: server
    options:
      host: 0.0.0.0
      port:
        - 7114
    routes:
      - when:
          - port: 7114
        exit: north_http_server
    telemetry:
      metrics:
        - stream.*
  north_http_server:
    type: http
    kind: server
    routes:
      - when:
          - headers:
              :scheme: http
              :authority: localhost:7114
        exit: north_http_kafka_mapping
    telemetry:
      metrics:
        - http.*
        - stream.*
  north_http_kafka_mapping:
    type: http-kafka
    kind: proxy
    routes:
      - when:
          - method: GET
            path: /{topic}
        exit: north_kafka_cache_client
        with:
          capability: fetch
          topic: ${params.topic}
          merge:
            content-type: application/json
    telemetry:
      metrics:
        - http.*
        - stream.*
  north_kafka_cache_client:
    type: kafka
    kind: cache_client
    exit: south_kafka_cache_server
    telemetry:
      metrics:
        - stream.*
  south_kafka_cache_server:
    type: kafka
    kind: cache_server
    options:
      bootstrap:
        - orders
    exit: south_kafka_client
    telemetry:
      metrics:
        - stream.*
  south_kafka_client:
    type: kafka
    kind: client
    options:
      servers:
        - ${{ env.KAFKA_SERVICE_ADDR }}
    exit: south_tcp_client
    telemetry:
      metrics:
        - stream.*
  south_tcp_client:
    type: tcp
    kind: client
    telemetry:
      metrics:
        - stream.*

telemetry:
  attributes:
    service.name: ${{ env.OTEL_SERVICE_NAME }}
    service.version: ${{ env.ZILLA_VERSION }}

  # Desired metrics to track
  metrics:
    - http.active.requests
    - http.duration
    - http.request.size
    - http.response.size
    - stream.active.received
    - stream.active.sent
    - stream.opens.received
    - stream.opens.sent
    - stream.data.received
    - stream.data.sent
    - stream.errors.received
    - stream.errors.sent
    - stream.closes.received
    - stream.closes.sent

  # OTEL exporter endpoint definition
  exporters:
    stdout_logs_exporter:
      type: stdout
    otel_exporter_otlp:
      type: otlp
      options:
        interval: 5
        signals:
          - metrics
          - logs
        endpoint:
          protocol: http
          location: ${{ env.OTEL_EXPORTER_OTLP_ENDPOINT }}
